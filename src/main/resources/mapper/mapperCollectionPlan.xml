<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="colplan">

    <sql id="selectFields">
        id,
        planname,
        tool,
        logtype,
        description,
        collecttype as collectionType,
        cinterval as interval,
        ownerid as owner,
        stop,
        tscollectstart as collectStart,
        tscreated as created,
        tsstart as start,
        tsend as end,
        tslastcollect as lastCollect,
        tsnext as nextAction,
        tslastpoint as lastPoint,
        laststatus as detail,
        case when laststatus='halted' or laststatus='completed' then 'stop' else 'running' end as status,
        case when collecttype=1 then 'cycle' else 'continuous' end as collectTypeStr
    </sql>

    <select id="selectAll" resultType="CollectPlanVo">
        select
            <include refid="selectFields" />

        from rsss."collection_plan"
    </select>

    <select id="selectAllOptions" parameterType="hashmap" resultType="CollectPlanVo">
        select
            <include refid="selectFields" />

        from rsss."collection_plan" as t_collect
        <if test="order!=null and order==true">
        order by t_collect.tsnext
        </if>
        <if test="limit!=null">
        limit #{limit}
        </if>
    </select>

    <select id="selectId" parameterType="Integer" resultType="CollectPlanVo">
        select
            <include refid="selectFields" />

        from rsss."collection_plan"
        where id=#{id}
    </select>

    <insert id="insert" parameterType="CollectPlanVo">
        <selectKey keyProperty="id" resultType="Integer" order="BEFORE">
            select nextval('rsss.collection_plan_id_seq')
        </selectKey>
        insert into rsss."collection_plan" (
            id,
            planname,
            tool,
            logtype,
            tscreated,
            description,
            collecttype,
            cinterval,
            tscollectstart,
            tsstart,
            tsend,
            ownerid,
            tsnext,
            tslastpoint
        ) values (
            #{id},
            #{planName},
            #{tool},
            #{logType},
            now(),
            #{description},
            #{collectionType},
            #{interval},
            #{collectStart},
            #{start},
            #{end},
            #{owner},
            #{nextAction},
            #{lastPoint}
        )
    </insert>

    <update id="update" parameterType="CollectPlanVo">
        update rsss."collection_plan" set
            planname = #{planName},
            tslastcollect = #{lastCollect},
            tsnext = #{nextAction},
            <if test="lastStatus!=null">
            laststatus = #{lastStatus},
            </if>
            stop = #{stop},
            tslastpoint = #{lastPoint}
        where id = #{id}
    </update>

    <update id="updateStatus" parameterType="CollectPlanVo">
        update rsss."collection_plan" set
            laststatus = #{lastStatus}
        where id = #{id}
    </update>

    <delete id="delete" parameterType="Integer">
        delete from rsss."collection_plan" where id=#{id}
    </delete>
</mapper>